package handlers

import (
	"net/http"
	"strconv"
	"strings"

	"pet_project_blog/internal/apperrors"
	"pet_project_blog/internal/services"

	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

// PostHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤
type PostHandler struct {
	postService services.PostService
	logger      *zap.Logger
}

// NewPostHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä PostHandler
func NewPostHandler(postService services.PostService, logger *zap.Logger) *PostHandler {
	return &PostHandler{
		postService: postService,
		logger:      logger,
	}
}

// getHome –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET / (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞).
func (h *PostHandler) getHome(c *gin.Context) {
	message := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Blog API! üöÄ\n\n" +
		"–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:\n" +
		"‚Ä¢ GET /posts - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤\n" +
		"‚Ä¢ POST /posts - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç\n" +
		"‚Ä¢ GET /posts/:id - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç\n" +
		"‚Ä¢ POST /posts/:id/comments - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É\n" +
		"‚Ä¢ GET /posts/:id/comments - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É\n\n" +
		"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:\n" +
		"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ?fields=id,title –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π –æ—Ç–≤–µ—Ç–∞\n" +
		"‚Ä¢ –ü—Ä–∏–º–µ—Ä: /posts?fields=id,title,created_at\n\n" +
		"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ /register, –∞ –ø–æ—Ç–æ–º /login .\n\n" +
		"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –±–ª–æ–≥–∏–Ω–≥–∞! ‚ú®"

	c.JSON(http.StatusOK, gin.H{
		"message": message,
	})

	// c.Data(http.StatusOK, "text/plain; charset=utf-8", []byte(message))
}

// createPost –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST /posts (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞).
func (h *PostHandler) createPost(c *gin.Context) {
	ctx := c.Request.Context()
	userID, exists := c.Get("user_id")
    if !exists {
        h.logger.Warn("User ID not found in context", zap.String("handler", "createPost"))
        c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
        return
    }

	var input struct {
		Title   string `json:"title" binding:"required"`
		Content string `json:"content" binding:"required"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		h.logger.Warn("Invalid title or content format", zap.String("id", c.Param("id")))
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input"})
		return
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
	post, err := h.postService.CreatePost(ctx, input.Title, input.Content, userID.(int))
	if err != nil {
		if err == apperrors.ErrEmptyTitle {
			c.JSON(http.StatusBadRequest, gin.H{"error": "title must not be empty"})
			return
		}
		if err == apperrors.ErrLengthTitle {
			c.JSON(http.StatusBadRequest, gin.H{"error": "maximum length title exceeded"})
			return
		}
		if err == apperrors.ErrEmptyContent {
			c.JSON(http.StatusBadRequest, gin.H{"error": "content must not be empty"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create post"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"post": post,
	})
}

// getPost –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET /posts/:id (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞).
func (h *PostHandler) getPost(c *gin.Context) {
	ctx := c.Request.Context()
	idStr := c.Param("id")

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ int
	id, err := strconv.Atoi(idStr)
	if err != nil {
		h.logger.Warn("Invalid ID format", zap.String("id", c.Param("id")))
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid post ID"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID
	post, err := h.postService.GetPost(ctx, id)
	if err != nil {
		if err == apperrors.ErrNotFoundPost {
			c.JSON(http.StatusNotFound, gin.H{"error": "Post not found"})
			return
		}
		if err == apperrors.ErrInvalidID {
			c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid post ID"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Internal server error"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"post": post,
	})
}

// getAllPosts –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET /posts (–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤).
func (h *PostHandler) getAllPosts(c *gin.Context) {
	ctx := c.Request.Context()

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	fields := c.Query("fields") // –Ω–∞–ø—Ä–∏–º–µ—Ä: "id,title"

	posts, err := h.postService.GetAllPosts(ctx)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to get posts"})
		return
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if fields != "" {
		fieldList := strings.Split(fields, ",")
		postsWithFields := make([]gin.H, len(posts))
		for i, post := range posts {
			postsWithFields[i] = gin.H{}
			for _, f := range fieldList {
				switch f {
				case "id":
					postsWithFields[i]["id"] = post.ID
				case "title":
					postsWithFields[i]["title"] = post.Title
				case "content":
					postsWithFields[i]["content"] = post.Content
				case "created_at":
					postsWithFields[i]["created_at"] = post.CreatedAt
				case "user_id":
					postsWithFields[i]["user_id"] = post.UserID
				default:
					h.logger.Warn("Invalid filter to response fields", zap.String("fields", fields))
					c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid filter to response fields"})
					return
				}
			}
		}
		c.JSON(http.StatusOK, gin.H{"posts": postsWithFields})
		return
	}

	c.JSON(http.StatusOK, gin.H{"posts": posts})
}

// createComments –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST /posts/:id/comments (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø–æ—Å—Ç–∞).
func (h *PostHandler) createComment(c *gin.Context) {
	ctx := c.Request.Context()
	userID, exists := c.Get("user_id")
    if !exists {
        h.logger.Warn("User ID not found in context", zap.String("handler", "createPost"))
        c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
        return
    }
	
	var input struct {
		Content string `json:"content" binding:"required"`
	}
	idStr := c.Param("id")

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ int
	id, err := strconv.Atoi(idStr)
	if err != nil {
		h.logger.Warn("Invalid ID format", zap.String("id", c.Param("id")))
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid post ID"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	if err := c.ShouldBindJSON(&input); err != nil {
		h.logger.Warn("Invalid content format", zap.String("id", c.Param("id")))
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input"})
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
	comment, err := h.postService.CreateComment(ctx, id, input.Content, userID.(int))
	if err != nil {
		if err == apperrors.ErrNotFoundPost {
			c.JSON(http.StatusNotFound, gin.H{"error": "Post not found"})
			return
		}
		if err == apperrors.ErrInvalidID {
			c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid post ID"})
			return
		}
		if err == apperrors.ErrEmptyContent {
			c.JSON(http.StatusBadRequest, gin.H{"error": "Comment content cannot be empty"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Internal server error"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"comment": comment,
	})
}

// getComments –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET /posts/:id/comments (–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å—Ç–∞).
func (h *PostHandler) getComments(c *gin.Context) {
	ctx := c.Request.Context()
	idStr := c.Param("id")

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ int
	id, err := strconv.Atoi(idStr)
	if err != nil {
		h.logger.Warn("Invalid ID format", zap.String("id", c.Param("id")))
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid post ID"})
		return
	}

	comments, err := h.postService.GetCommentsByPostID(ctx, id)
	if err != nil {
		if err == apperrors.ErrNotFoundPost {
			c.JSON(http.StatusNotFound, gin.H{"error": "Post not found"})
			return
		}
		if err == apperrors.ErrInvalidID {
			c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid post ID"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to get comments"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"comments": comments})
}
